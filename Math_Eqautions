# Here are the imports
#____________________________________________
import math
#____________________________________________

print("\n\n")

# Here are Global Variables
#____________________________________________
i = [1, 0, 0]
j = [0, 1, 0]
k = [0, 0, 1]
#____________________________________________

# Here are the methods
#____________________________________________

# Returns the Scalar of the magnitude of the vector a
def magnitude(a: list) -> float:
    if (len(a) == 2):
        return math.sqrt(math.pow(a[0], 2) + math.pow(a[1], 2))
    elif (len(a) == 3):
        return math.sqrt(math.pow(a[0], 2) + math.pow(a[1], 2) + math.pow(a[2], 2))

# Returns the Vector of the unit vector  of a
def unitVector(a: list) -> list:
    magnitudeOfA = magnitude(a)
    b = a.copy()
    b[0] = b[0]/magnitudeOfA
    b[1] = b[1]/magnitudeOfA
    if (len(a) == 2):
        return b
    elif (len(a) == 3):
        b[2] = b[2]/magnitudeOfA
        return b

# Returns a Vector of the sum of two vectors a + b
def add(a: list, b: list) -> list:
    result = a.copy()
    result[0] = a[0] + b[0]
    result[1] = a[1] + b[1]
    if (len(a) == 3 and len(b) == 3):
        result[2] = a[2] + b[3]
    return result

# Returns a vector of the subtraction of two vectors a - b
def subtract(a:list, b: list) -> list:
    result = a.copy()
    result[0] = a[0] - b[0]
    result[1] = a[1] - b[1]
    if (len(a) == 3 and len(b) == 3):
        result[2] = a[2] + b[3]
    return result

# Return the Scalar of the dot product from a*b
def dotProduct (a: list, b: list) -> float:
    if (len(a) == 2 and len(b) == 2):
        return (a[0] * b[0]) + (a[1] * b[1])
    elif (len(a) == 3 and len(b) == 3):
        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2])

# Retruns the vector of the corss product of aXb
def crossProduct(a: list, b: list) -> list:
    # if (len(a) == 2 and len(b) == 2):
    #     # I dont know how to do this yet
    # elif (len(a) == 3 and len(b) == 2 ):
    AxB = [0, 0, 0]
    AxB[0] = a[1] * b[2] - a[2] * b[1]
    AxB[1] = a[2] * b[0] - a[0] * b[2]
    AxB[2] = a[0] * b[1] - a[1] * b[0]
    return AxB

# Returns the degrees between vector a and vector b
def findDeg(a: list, b: list) -> float:
    return math.degrees(math.acos(dotProduct(a, b)/(magnitude(a) * magnitude(b))))

#____________________________________________

# Call the methids here
#____________________________________________

o = [12, -6, -12]
p = [2, 4]

u = [1, -2, 3]
v = [2, 0, -6]

s = [3, 4]
d = [9, 1]

print(add(s, d))
print("\n")
print(subtract(d, s))
print(crossProduct(u,v))
print(magnitude(crossProduct(u,v)))
print("\n")
print(findDeg(u,v))
print(math.sin(math.radians(findDeg(u,v))))
#____________________________________________

print("\n\n")